import 'package:flutter/material.dart';import 'package:provider/provider.dart';import 'package:lucide_icons/lucide_icons.dart';import 'package:cpu_memory_tracking_app/providers/performance_provider.dart';import 'package:cpu_memory_tracking_app/utils/theme.dart';class DeviceInfoWidget extends StatelessWidget {  const DeviceInfoWidget({super.key});  @override  Widget build(BuildContext context) {    return Consumer<PerformanceProvider>(      builder: (context, provider, child) {        final hardwareInfo = provider.hardwareInfo;                if (hardwareInfo == null) {          return Card(            child: Padding(              padding: const EdgeInsets.all(16),              child: Row(                children: [                  Icon(                    LucideIcons.cpu,                    color: Theme.of(context).colorScheme.onSurfaceVariant,                  ),                  const SizedBox(width: 12),                  Expanded(                    child: Column(                      crossAxisAlignment: CrossAxisAlignment.start,                      children: [                        Text(                          'Loading device info...',                          style: Theme.of(context).textTheme.bodyMedium?.copyWith(                            fontWeight: FontWeight.w500,                          ),                        ),                        const SizedBox(height: 4),                        Text(                          'Please wait',                          style: Theme.of(context).textTheme.bodySmall?.copyWith(                            color: Theme.of(context).colorScheme.onSurfaceVariant,                          ),                        ),                      ],                    ),                  ),                  const SizedBox(                    width: 16,                    height: 16,                    child: CircularProgressIndicator(strokeWidth: 2),                  ),                ],              ),            ),          );        }        return Card(          child: Padding(            padding: const EdgeInsets.all(16),            child: Column(              crossAxisAlignment: CrossAxisAlignment.start,              children: [                Row(                  children: [                    Icon(                      LucideIcons.cpu,                      color: AppTheme.primaryBlue,                    ),                    const SizedBox(width: 8),                    Text(                      'Device Information',                      style: Theme.of(context).textTheme.titleMedium?.copyWith(                        fontWeight: FontWeight.bold,                      ),                    ),                  ],                ),                const SizedBox(height: 16),                _buildInfoRow(                  context,                  LucideIcons.cpu,                  'Processor',                  hardwareInfo.processorName,                ),                const SizedBox(height: 12),                _buildInfoRow(                  context,                  LucideIcons.memoryStick,                  'Memory',                  hardwareInfo.totalRamGB,                ),                const SizedBox(height: 12),                _buildInfoRow(                  context,                  LucideIcons.layers,                  'CPU Cores',                  '${hardwareInfo.coreCount} core${hardwareInfo.coreCount == 1 ? '' : 's'}',                ),                const SizedBox(height: 12),                _buildInfoRow(                  context,                  LucideIcons.settings,                  'Architecture',                  hardwareInfo.architecture,                ),              ],            ),          ),        );      },    );  }  Widget _buildInfoRow(BuildContext context, IconData icon, String label, String value) {    return Row(      crossAxisAlignment: CrossAxisAlignment.start,      children: [        Icon(          icon,          size: 16,          color: Theme.of(context).colorScheme.onSurfaceVariant,        ),        const SizedBox(width: 8),        Expanded(          child: Column(            crossAxisAlignment: CrossAxisAlignment.start,            children: [              Text(                label,                style: Theme.of(context).textTheme.bodySmall?.copyWith(                  color: Theme.of(context).colorScheme.onSurfaceVariant,                ),              ),              Text(                value,                style: Theme.of(context).textTheme.bodyMedium?.copyWith(                  fontWeight: FontWeight.w500,                ),              ),            ],          ),        ),      ],    );  }}